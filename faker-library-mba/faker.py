# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17l0V3eqk1F5JTLNsN0yB7bd6x7et_4zm
"""

!pip install Faker

from faker import Faker

Faker.seed(0)
fake = Faker()
for _ in range(10):
    print(fake.name())

"""You can find docs for all the various categories of synthetoc data (called "providers") [here](https://faker.readthedocs.io/en/master/providers.html)"""

Faker.seed(0)
faker = Faker()

for _ in range(10):
    print(
        faker.prefix_female(), 
        faker.first_name_female(), 
        faker.last_name()
    )

Faker.seed(0)
for _ in range(10):
    print(faker.address())
    print('=' * 20)

Faker.seed(0)

for _ in range(10):
    print(faker.building_number(), faker.street_name(), faker.city(), faker.postcode(), faker.country())

"""Also, note that not all providers support all locales - to see what locales are available, and what providers are supported for each locale, see [here](https://faker.readthedocs.io/en/master/locales.html)"""

Faker.seed(0)
faker = Faker(['fa_IR'])

for _ in range(10):
    print(faker.address())
    print('=' * 20)

for _ in range(10):
    print(faker.name())

fake = Faker(['en_US', 'fr_FR', 'es_ES'])
Faker.seed(0)
for _ in range(10):
    print(fake.name())

"""

As you can see though, this is not working as expected. So, we have something that works for single locales, but not multiple locales. (It seems that setting the seed produces this bug - if you don't set a seed, or use Faker.seed(), then things appear to work fine)

To get around this, we'll use Python's random.choices function to pick the "next" value from a choice of possible single-locale providers.
"""

locales = ['en_US', 'fr_FR', 'es_ES']
providers = [Faker(locale) for locale in locales]

from random import choice, choices, seed
provider = lambda: choice(providers)

"""This provider function will give us a random provider, which we can use to get the next value:"""

Faker.seed(0)
seed(0)
for _ in range(10):
    print(provider().name())

"""We can modify this slightly to gives us the ability to weigh the choices of local providers. We simply use Python's random.choices function which allows us to specify weights:"""

locales = ['fa_IR', 'en_US']
weights = [1, 2]
providers = [Faker(locale) for locale in locales]
provider = lambda: choices(providers, weights=weights, k=1)[0]

Faker.seed(0)
seed(0)
for _ in range(10):
    print(provider().name())

"""### Unique Values"""

Faker.seed(0)
faker = Faker()
for _ in range(10):
    print(faker.unique.ssn())

from faker.exceptions import UniquenessException
faker = Faker()
try:
    for _ in range(244):
        faker.unique.country()
except UniquenessException:
    print('Not enough unique values available')

"""### Other Providers"""

Faker.seed(0)
faker = Faker()

print('ssn:', faker.ssn())
print('color name:', faker.color_name())
print('isbn-10:', faker.isbn10())
print('company email:', faker.company_email())
print('bank IBAN:', faker.iban())
print('User agent:', faker.user_agent())

"""
The Python Provider

There is also one very interesting provider, called the python provider - docs for this provider are [here](https://faker.readthedocs.io/en/master/providers/faker.providers.python.html).

We can use it to generate Python objects, such as lists, dictionaries, etc.
"""

Faker.seed(0)
faker = Faker()

for _ in range(10):
    data = faker.pylist(
        nb_elements=6,
        variable_nb_elements=False,
        value_types= ['bool', 'int'],
    )
    print(data)

faker.pylist(nb_elements=10, value_types=['name', 'hostname'])

"""

Another interesting one is the pystr_format function, where we can specify a format of mixed characters and digits.

We use a template string to indicate the output string format we want, using # for single digit placeholder, and ? for single character placeholder.
"""

Faker.seed(0)
faker = Faker()
# ? means character & # means number
template = 'x-??##-###-?'
for _ in range(10):
    print(faker.pystr_format(template))

"""We can also limit the character set to choose from:"""

Faker.seed(0)
faker = Faker()

template = 'x-??##-###-?'
for _ in range(10):
    print(faker.pystr_format(template, 'abcdefg'))

"""### bothify

Note: this pystr_format is actually using another function called bothify, documented [here](https://faker.readthedocs.io/en/master/providers/baseprovider.html), along with other functions like hexify, lexify, numerify, etc.
"""

Faker.seed(0)
faker = Faker()
template = 'x-??##-###-?'
for _ in range(10):
    print(faker.bothify(template, 'abcdefg'))

"""One big difference is that pystr_format is slightly more versatile because you can use other provider functions in the template:"""

Faker.seed(0)
faker = Faker()

template = "Customer: {{name}} ({{email}})"
for _ in range(10):
    print(faker.pystr_format(template))

"""### custom library"""

!pip install faker_airtravel

from faker_airtravel import AirTravelProvider

Faker.seed(0)
faker = Faker()
faker.add_provider(AirTravelProvider)

faker.airport_object()

faker.flight()